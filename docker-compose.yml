version: '3.8'

services:
  # Base de données MongoDB
  mongodb:
    image: mongo:6.0
    container_name: sovereign-bonds-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: sovereign-bonds
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - sovereign-bonds-network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: sovereign-bonds-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass "redis123"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sovereign-bonds-network

  # Application Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sovereign-bonds-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/sovereign-bonds?authSource=admin
      REDIS_URL: redis://:redis123@redis:6379
      JWT_SECRET: development-jwt-secret-change-in-production
      FRONTEND_URL: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
      - node_modules_backend:/app/backend/node_modules
    depends_on:
      - mongodb
      - redis
    networks:
      - sovereign-bonds-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Application Frontend (développement)
  frontend:
    image: node:18-alpine
    container_name: sovereign-bonds-frontend
    working_dir: /app
    command: npm start
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_ENVIRONMENT: development
      CHOKIDAR_USEPOLLING: true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - node_modules_frontend:/app/node_modules
    depends_on:
      - backend
    networks:
      - sovereign-bonds-network

  # Blockchain local (Ganache pour les tests)
  ganache:
    image: trufflesuite/ganache:latest
    container_name: sovereign-bonds-ganache
    restart: unless-stopped
    command: >
      ganache
      --host 0.0.0.0
      --port 8545
      --accounts 10
      --deterministic
      --mnemonic "test test test test test test test test test test test junk"
      --chainId 1337
    ports:
      - "8545:8545"
    networks:
      - sovereign-bonds-network

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: sovereign-bonds-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sovereign-bonds-network
    profiles:
      - monitoring

  # Grafana pour les dashboards (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: sovereign-bonds-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3010:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - sovereign-bonds-network
    profiles:
      - monitoring

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: sovereign-bonds-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/build:/usr/share/nginx/html:ro
    depends_on:
      - backend
      - frontend
    networks:
      - sovereign-bonds-network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  node_modules_backend:
    driver: local
  node_modules_frontend:
    driver: local

networks:
  sovereign-bonds-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
